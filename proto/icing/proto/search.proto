// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package icing.lib;

import "icing/proto/document.proto";
import "icing/proto/status.proto";
import "icing/proto/term.proto";

option java_package = "com.google.android.icing.proto";
option java_multiple_files = true;
option objc_class_prefix = "ICNG";

// Client-supplied specifications on what documents to retrieve.
// Next tag: 5
message SearchSpecProto {
  // REQUIRED: The "raw" query string that users may type. For example, "cat"
  // will search for documents with the term cat in it.
  optional string query = 1;

  // Indicates how the query terms should match terms in the index.
  //
  // TermMatchType.Code=UNKNOWN
  // Should never purposely be set and may lead to undefined behavior. This is
  // used for backwards compatibility reasons.
  //
  // TermMatchType.Code=EXACT_ONLY
  // Query terms will only match exact tokens in the index.
  // Ex. A query term "foo" will only match indexed token "foo", and not "foot"
  // or "football"
  //
  // TermMatchType.Code=PREFIX
  // Query terms will match indexed tokens when the query term is a prefix of
  // the token.
  // Ex. A query term "foo" will match indexed tokens like "foo", "foot", and
  // "football".
  optional TermMatchType.Code term_match_type = 2;

  // OPTIONAL: Only search for documents that have the specified namespaces. If
  // unset, the query will search over all namespaces. Note that this applies to
  // the entire 'query'. To issue different queries for different namespaces,
  // separate Search()'s will need to be made.
  repeated string namespace_filters = 3;

  // OPTIONAL: Only search for documents that have the specified schema types.
  // If unset, the query will search over all schema types. Note that this
  // applies to the entire 'query'. To issue different queries for different
  // schema types, separate Search()'s will need to be made.
  repeated string schema_type_filters = 4;
}

// Client-supplied specifications on what to include/how to format the search
// results.
// Next tag: 4
message ResultSpecProto {
  // The results will be returned in pages, and num_per_page specifies the
  // number of documents in one page.
  optional int32 num_per_page = 1 [default = 10];

  // Whether to collect and return debug_info in the SearchResultProto.
  optional bool debug_info = 2;

  // How to provide snippeting information in the SearchResultProto.
  // Next tag: 5
  message SnippetSpecProto {
    // Only the first num_to_snippet documents will have snippet information
    // provided. If set to 0, snippeting is disabled.
    optional int32 num_to_snippet = 1;

    // Only the first num_matches_per_property matches for a single section will
    // have snippet information provided. If set to 0, snippeting is disabled.
    optional int32 num_matches_per_property = 2;

    // How large of a window to provide. Windows start at max_window_bytes / 2
    // bytes before the middle of the matching token and end at max_window_bytes
    // / 2 bytes after the middle of the matching token. Windowing respects
    // token boundaries.
    // Therefore, the returned window may be smaller than requested. Setting
    // max_window_bytes to 0 will disable windowing information. If matches
    // enabled is also set to false, then snippeting is disabled.
    // Ex. max_window_bytes = 16. "foo bar baz bat rat" with a query of "baz"
    // will return a window of "bar baz bat" which is only 11 bytes long.
    optional int32 max_window_bytes = 3;
  }
  optional SnippetSpecProto snippet_spec = 3;
}

// The representation of a single match within a DocumentProto property.
// Next tag: 6
message SnippetMatchProto {
  // Properties may have multiple values. values_index indicates which of these
  // multiple string values the match occurred in. For properties with only one
  // value, the values_index will always be 0.
  // Ex. "Recipients" [
  //      { { "Name"         : "Daffy Duck" }
  //        { "EmailAddress" : "daffduck@gmail.com" } },
  //      { { "Name"         : "Donald Duck" }
  //        { "EmailAddress" : "donduck@gmail.com" }  }
  // "Daffy Duck" is the string value with a value_index of 0 for property
  // "Recipients.Name". "Donald Duck" is the string value with a value_index of
  // 1 for property "Recipients.Name".
  optional int32 values_index = 1;

  // The position and length within the matched string at which the exact
  // match begins.
  optional int32 exact_match_position = 2;

  optional int32 exact_match_bytes = 3;

  // The position and length of the suggested snippet window.
  optional int32 window_position = 4;

  optional int32 window_bytes = 5;
}

// A Proto representing all snippets for a single DocumentProto.
// Next tag: 2
message SnippetProto {
  // A pair of property name and all snippet matches that correspond to the
  // property values in the corresponding DocumentProto.
  // Next tag: 3
  message EntryProto {
    // A '.'-delimited sequence of property names indicating which property in
    // the DocumentProto these snippets correspond to.
    // Example properties: 'body', 'sender.name', 'sender.emailaddress', etc.
    optional string property_name = 1;

    repeated SnippetMatchProto snippet_matches = 2;
  }
  // Properties that do not appear in entries do not contain any matches.
  repeated EntryProto entries = 1;
}

// Icing lib-supplied results from a search results.
// Next tag: 5
message SearchResultProto {
  // Status code can be one of:
  //   OK
  //   FAILED_PRECONDITION
  //   INVALID_ARGUMENT
  //   ABORTED
  //   INTERNAL
  //
  // See status.proto for more details.
  //
  // TODO(b/147699081): Fix error codes: +ABORTED.
  // go/icing-library-apis.
  optional StatusProto status = 1;

  // The Results that matched the query. Empty if there was an error.
  // Next tag: 3
  message ResultProto {
    // Document that matches the SearchSpecProto.
    optional DocumentProto document = 1;

    // Snippeting information for the document if requested in the
    // ResultSpecProto. A default instance, if not requested.
    optional SnippetProto snippet = 2;
  }
  repeated ResultProto results = 2;

  // Various debug fields. Not populated if ResultSpecProto.debug_info = false.
  message DebugInfoProto {
    // The number of results that actually matched the SearchSpecProto. This is
    // different from the number of `documents` returned since the user can
    // set a ResultSpecProto.limit on how many results are returned to them.
    optional uint64 num_results = 1;

    // Latency to parse and execute the query, in milliseconds.
    optional uint64 latency_ms = 2;

    // The internal representation of the actual query string that was executed.
    // This may be different from the SearchSpecProto.query if the original
    // query was malformed.
    optional string executed_query = 3;
  }
  optional DebugInfoProto debug_info = 3;

  // An opaque token used internally to keep track of information needed for
  // pagination. A valid pagination token is required to fetch other pages of
  // results. The default value 0 means that there're no more pages.
  // LINT.IfChange(next_page_token)
  optional uint64 next_page_token = 4 [default = 0];
  // LINT.ThenChange(//depot/google3/icing/result/result-state-manager.h:kInvalidNextPageToken)
}
